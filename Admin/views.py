from django.shortcuts import render,HttpResponse,redirect
from django.contrib import messages
from django.contrib.auth import logout
from Users.models import UserRegistrationModel,CSRFResponse
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
import pandas as pd
from django.conf import settings
import os
# Create your views here.
def Base(request):
    # Logic for the base page
    # For example, fetching data to display on the base page
    # Render the Base.html template with the data
    return render(request, 'WebVulnerability/Base.html')
def AdminHome(request):
    return render(request, 'Admin/AdminHome.html')

def AdminViewUsers(request):
    data = UserRegistrationModel.objects.all()
    return render(request, 'Admin/RegisteredUsers.html', {'data': data})
 
def AdminActivaUsers(request):
    if request.method == 'GET':
        id = request.GET.get('uid')
        status = 'activated'
        print("PID = ", id, status)
        UserRegistrationModel.objects.filter(id=id).update(status=status)
        data = UserRegistrationModel.objects.all()
    return render(request,'Admin/RegisteredUsers.html',{'data':data})

def adminviewallcsrfs(request):
    data_list = CSRFResponse.objects.order_by('id')
    page = request.GET.get('page', 1)
    paginator = Paginator(data_list, 60)
    try:
        users = paginator.page(page)
    except PageNotAnInteger:
        users = paginator.page(1)
    except EmptyPage:
        users = paginator.page(paginator.num_pages)

    return render(request, 'Admin/viewAllCSRFS.html', {'users': users})
    
def AdminLogout(request):
    # Perform any additional logic if needed
    # For example, logging out the user
    
    logout(request)
    return redirect('Admin:Base')    



def PostRequestdata(request):
    csv_file_path = os.path.join(settings.MEDIA_ROOT, 'features_matrix.csv')

    try:
        df = pd.read_csv(csv_file_path)
        data = df[['numOfParams', 'numOfBools', 'numOfIds', 'numOfBlobs', 'reqLen', 'isPOST']]
        data_html = data.to_html()
        return render(request, "Admin/PostviewData.html", {"data": data_html})
    except FileNotFoundError:
        return render(request, "Admin/PostviewData.html", {"data": "CSV file not found"})
def goback(request):
    return redirect('Admin/AdminHome.html')

def GetRequestdata(request):
    csv_file_path = os.path.join(settings.MEDIA_ROOT, 'features_matrix.csv')

    try:
        df = pd.read_csv(csv_file_path)
        data = df[['numOfParams', 'numOfBools', 'numOfIds', 'numOfBlobs', 'reqLen', 'isGET']]
        data_html = data.to_html()
        return render(request, "Admin/GetviewData.html", {"data": data_html})
    except FileNotFoundError:
        return render(request, "Admin/GetviewData.html", {"data": "CSV file not found"})
